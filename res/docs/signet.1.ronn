signet(1) -- Signet command line tool for use with a Dark Internet Mail Environment.
====

## SYNOPSIS

   RESOLVER:
       signet {-R|--resolve} [resolver-options]

   CREATION:
       signet {-c|--create} [create-options] 
   
   ROTATE:
       signet {-r|--rotate} [rotate-options] 
   
   SIGN:
       signet {-s|--sign} [sign-options] 
   
   VERIFY:
       signet {-v|--verify} [verify-options]

   DISPLAY:
       signet {-d|--dump} [display-options] 
       signet {-p|--parse} [display-options] 
       

## DESCRIPTION

Signets represent the public identity for email addresses and organizational domains. Their primary purpose is providing the public keys used to verify signatures and encrypt messages. Optionally, signets may also provide information associated with the signet owner. The `signet` command provides simple command line interface for generating, signing, verifying, fetching, displaying signets.

Signets are divided into two types: organizational signets which are identified using a domain name, and user signets which are identified using an email address. Organizational signets are identified using *domain.tld* while user signets are follow in the form *mailbox@domain.tld*. Valid user signets **must be signed** by organizational key associated with the domain portion of the address. User generated public keys without an organizational signature are called signet signing requests.

## COMMANDS

-r,  --resolve [resolver-options]
         Resolves an identifier into a signet, fetching the required data and validating the results. This is the default action and is implied when no other action is explicitly stipulated.

-c,  --create [create-options]
         Create a new organizational signet or user signet signing request. 

-s,  --sign [sign-options]
         Convert a user signet signing request into a signet by signing it with an organizational key.

-v,  --verify [verify-options]
         Verify an organizational or user signet.

-p,  --parse [display-options] 
         Parse and provide a list of a signet or signing request's contents.

## RESOLVER OPTIONS

-O,  --org=DOMAIN
-U,  --user=EMAIL
-q,  --query=EMAIL|DOMAIN
         Typically the trailing string is the identifier to be fetched. This option overrides that behaviour, allowing the identifier to appear anywhere on the command line. Several signets may be fetched with a single execution by providing multiple instances of this option.
     
     --fingerprint=STRING
         Specify the specific signet which should be retrieved for the provided identifier. The fingerprint may be for a full or cryptographic signet and is provided in hexadecimal form.
 
     --disable-verification
         Turns off the verification rules, which may allow the command to return a signet which otherwise would have resulted in an error.

     --host=HOST
         Force a resolver to fetch signets from the specified host instead of looking this information in the domain name system. This option will disable some of the verification rules typically applied to organizational signets.

## CREATION OPTIONS

-O,  --org=DOMAIN
-U,  --user=EMAIL
         Typically the trailing string provides a domain name or email address and this identifier dictates whether an organizational or user signet signing request is being created. This option overrides that behaviour, and allows the identifier to appear anywhere on the command line. If this option is provided, the identifier must be valid for the provided type. Only one of these options may used at a time.

     --rotate=FILE
         When creating a new user signet signing request, sign the request using the previous user key which is provided by the specified file. This only option is only valid when creating user signet signing requests and will generate an error if the command calls for the creation of an organizational signet.

     --key=FILE
         Write the generated keys out to specified file instead of the console, or if the out argument is used, the same file as the signet (or signet signing request).

     --wizard
         Collect information for inclusion in the output using a question and answer format. If this option is used and the command does not provide the identifier, it will be collected during the inquiry process.

## SIGN OPTIONS

-U,   --user=EMAIL
         Typically the trailing string provides the email address for the signing request. This option overrides that behaviour, and allows the identifier to appear anywhere on the command line. 

     --request=FILE     
         If this option is absent, the signing request must be in the current working directory in a file matching the email address (with the at symbol being replaced by a dash) and using the trailing file extension `.ssr` or this argument may be used to dictate a specific file with the signing request.

     --key=FILE     
         If this option is absent, the organizational key must be in the current working directory in a file matching the domain portion of the provided email address with the addition of a trailing file extension `.key` or this argument may be used to dictate which file provides the organizational key.

## VERIFY OPTIONS

     --org=FILE
     --user=FILE
         Typically the trailing string provides the file with the signet being verified. This option overrides that behaviour, and allows the file being verified to appear anywhere on the command line. If a user file is provided, the operation will retrieve the organizational signet for verification unless the org option is also specified, in which case the file provided by the org option must contain the organizational signet needed to verify the provided user signet.

     --fingerprint=STRING
         Specify the specific signet for a user that should be used as the root while verifying a chain of custody. This option is only valid when verifying user signets and then only if the provided file contains all of the signets needed to verify the chain of custody.

     --current=STRING
         Specify the fingerprint of the current user signet, otherwise the first user signet found in a file is assumed to be the current signet. This option is only valid if the fingerprint argument is also supplied.
 

## DISPLAY OPTIONS

     --key=FILE
-U,  --org=FILE
-O,  --user=FILE
     --request=FILE
         Typically the trailing string provides the file being parsed. This option overrides this behaviour, and allows the file to appear anywhere on the command line. If this option is provided, the file must contain a signet or key as dictated by the option being supplied or an error will occur. If a file contains multiple items, only those matching the argument type will be printed. To parse and print multiple files in a single operation simply provide these arguments multiple times.

-d,  --dump
         Produce a complete listing of a signet's contents instead of a summary, and include the unabridged contents of binary fields in hexadecimal form. This option will also print fingerprint information for a signet.

## GLOBAL OPTIONS

-o,  --out=FILE
         Direct non-informational output to the specified file instead of the console. For creation operations this will result in the signet (or signing request) and the generated keys being placed in the same file. See the create section above for details on how to write key information to a separate file. 

-h,  --help
         Provide the command line syntax and options available with the `signet` command.

     --verbose
         Provide expanded information.

     --version
         Provide the version for the `signet` command and its dependant libraries.

## RESOLVER EXAMPLES

The following commands illustrate various ways the signet tool could be used to fetch an organizational signet for a fictitious domain example.com:

`signet example.com`
`signet -q example.com`
`signet --query=example.com`
`signet --resolve example.com`
`signet --resolve -q example.com`
`signet --resolve -O example.com`
`signet --resolve -org=example.com`
`signet --resolve --query=example.com` 

The following commands illustrate various ways the signet tool could be used to fetch a user signet for the fictitious email address mailbox@example.com:

`signet mailbox@example.com`
`signet -q mailbox@example.com`
`signet --query=mailbox@example.com`
`signet --resolve mailbox@example.com`
`signet --resolve -q mailbox@example.com`
`signet --resolve -U mailbox@example.com`
`signet --resolve -user=mailbox@example.com`

The above queries could also be executed without involving the domain name system by specifying the host to fetch the signets from:

`signet --host=localhost example.com` 
`signet --host=localhost mailbox@example.com` 

Finally, if the signet should written to a file instead of the console:

`signet --o example.com.signet example.com` 
`signet --out=example.com.signet example.com` 
`signet -o mailbox-example.com.signet mailbox@example.com` 
`signet --out mailbox-example.com.signet mailbox@example.com` 

## ORG CREATION EXAMPLES

Create a new organizational signet for the domain `example.com`:

`signet --create example.com`

Create a new organizational signet, but specify where result should be saved instead of writing it to the console:

`signet --create --out=example.com.pem example.com`

Perform the same command but write the signet and keys to separate files:

`signet --create --key=example.com.key --out=example.com.signet example.com`

## USER CREATION EXAMPLES

Create a new user signet signing request for the email address `mailbox@example.com`:

`signet --create mailbox@example.com`

Create a new user signet signing request, but specify where result should be saved instead of writing it to the console:

`signet --create --out=mailbox-example.com.pem example.com`

Perform the same command but write the signet signing request and keys to separate files:

`signet --create --key=mailbox-example.com.key --out=mailbox-example.com.ssr example.com`

## SIGNING EXAMPLES

Sign the signet specified in the signet signing request found in `mailbox-example.com.ssr` using the key available in `example.com.key`:

`signet --sign mailbox@example.com`

Perform the same command but provide the file names explicitly and write the output to a file instead of the console:

`signet --sign --request=mailbox-example.com.ssr --key=example.com.key --user=mailbox@example.com --out=mailbox-example.com.signet`

## VERIFY EXAMPLES

Verify the chain of custody of user signet for `mailbox@example.com` between the first instance of the user signet and the last instance of the user signet found in the file mailbox-example.com.signet`:

`signet --verify mailbox@example.com`

Perform the same operation but provide the organizational signet in a different file instead of fetching it from the network (which is the default behaviour if the signet was not found in the same file as the user signet:

`signet --verify --org=example.com.signet mailbox@example.com`

## DISPLAY EXAMPLES

Dump out the fingerprint for a signet along with all of the information for any signets, signing requests, or keys found in the files. Note that a single file may contain multiple data items all of which will be printed. 

`signet --parse signet-ring.pem key-ring.pem` -

This time provide a complete dump, including fingerprints for the organizational signets found `example.com.signet`, user signing requests found in `mailbox-example.com.ssr`, signets found in `mailbox-example.com.signet` and keys found in `example.com.keys`:

`signet --parse --dump --org=example.com.signet --request=mailbox-example.com.ssr --user=mailbox-example.com.signet --keys=example.com.keys` 



